name: Flask Chatbot CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change this to 'master' if you're using 'master' as the default branch
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger

jobs:
  setup:
    runs-on: ubuntu-latest  # This defines the environment (Ubuntu)

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Checkout the repository code

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # You can specify any Python version here

      - name: Install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip
          # Ensure that requirements.txt exists at the root directory
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping dependency installation."
          fi

      - name: Run Flask app test
        run: |
          # Start Flask app and check if it's responding correctly (you may need to adjust this to fit your actual test)
          nohup flask run &
          sleep 5  # Wait for the server to start
          curl --fail http://127.0.0.1:5000/  # Make sure the homepage is responding

      - name: Run Flask app test for /get endpoint
        run: |
          curl --fail "http://127.0.0.1:5000/get?msg=Hello"  # Check if /get endpoint responds

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    if: success()  # Only deploy if setup job was successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping dependency installation."
          fi

      - name: Deploy Flask App
        run: |
          echo "Deploying Flask app..."
          # Add your deployment logic here (e.g., to Heroku, AWS, etc.)
          # This is just a placeholder command
          # ./deploy.sh
